[project]
name = "link-page"
version = "0.1.0"
description = "A landing page to show your homepage, github, social media etc.."
readme = "README.md"
requires-python = ">=3.9,<3.13"
license = "MIT"
authors = [{ name = "Grant Ramsay", email = "grant@gnramsay.com" }]
dependencies = [
  "csscompressor == 0.9.5",
  "fastapi[standard] ==0.115.0",
  "gunicorn == 23.0.0",
  "htmlmin == 0.1.12",
  "jinja2 == 3.1.4",
  "jsmin == 3.0.1",
  "simple-toml-settings == 0.8.0",
]

[tool.uv]
dev-dependencies = [
  "mypy == 1.11.2",
  "pre-commit ==4.0.1",
  "pymarkdownlnt ==0.9.24",
  "ruff ==0.6.9",
  "poethepoet ==0.29.0",
  "faker ==30.10.0",
  "greenlet ==3.1.1",
  "mock == 5.1.0",
  "pyfakefs ==5.7.0",
  "pytest == 8.3.3",
  "pytest-cov == 5.0.0",
  "pytest-xdist == 3.6.1",
  "pytest-sugar == 1.0.0",
  "pytest-randomly == 3.15.0",
  "pytest-reverse == 1.7.0",
  "pytest-mock == 3.14.0",
  "pytest-watcher == 0.4.3",
  "github-changelog-md == 0.9.5",
  "mkdocs ==1.6.1",
  "mkdocs-autorefs == 1.2.0",
  "mkdocs-material ==9.5.40",
  "mkdocs-git-revision-date-localized-plugin ==1.2.9",
  "mkdocs-latest-git-tag-plugin == 0.1.2",
  "mkdocs-minify-plugin == 0.8.0",
  "mkdocstrings == 0.26.1",
  "pymdown-extensions ==10.11.2",
  "pygments == 2.18.0",
]

[tool.poe.tasks]
pre.cmd = "uv run pre-commit run --all-files"
pre.help = "Run pre-commit checks"
mypy.cmd = "uv ruin mypy app/**/*.py tests/**/*.py --strict"
mypy.help = "Run mypy checks"
format.cmd = "uv run ruff format ."
format.help = "Format code with Ruff"
ruff.cmd = "uv run ruff check ."
ruff.help = "Run Ruff checks"
markdown.cmd = "uv run pymarkdown scan  -r -/**/[!CHANGELOG,!.github/]*.md docs/**/*.md"
markdown.help = "Run markdown checks"

# run all linting checks in sequence. we want to run them all, even if one fails
lint.ignore_fail = "return_non_zero"
lint.sequence = ["format", "ruff", "mypy", "markdown"]
lint.help = "Run all linting checks"

test.cmd = "uv run pytest"
test.help = "Run all tests (pytest)"
"test:watch".cmd = "uv run ptw . --now --clear"
"test:watch".help = "Run tests using Pytest in watch mode"

"docs:publish".cmd = "uv run mkdocs gh-deploy"
"docs:publish".help = "Publish documentation to GitHub Pages"
"docs:build".cmd = "uv run mkdocs build"
"docs:build".help = "Build documentation locally to './site' folder"
"docs:serve".cmd = "uv run mkdocs serve -w TODO.md -w CHANGELOG.md -w CONTRIBUTING.md"
"docs:serve".help = "Serve documentation locally"
"docs:serve:all".cmd = "uv run mkdocs serve -w TODO.md -w CHANGELOG.md -w CONTRIBUTING.md -a 0.0.0.0:9000"
"docs:serve:all".help = "Serve documentation locally on all interfaces"

# specific tasks for this project to help development of the front-end
serve.cmd = "uv run uvicorn app.main:app --reload --reload-include='*.html' --reload-include='*.css' --reload-include='*.js' --reload-include='*.toml'"
serve.help = "Run the FastAPI server with live reload and watch for changes"
show.cmd = "uv run browser-sync 'http://127.0.0.1:8000' 'app/static' --watch --files ."
show.help = "Run browser-sync to show the site and watch for changes"

# generate a CHANGELOG.md file from GitHub releases
changelog.cmd = "uv run github-changelog-md"
changelog.help = "Generate a CHANGELOG.md file"

# configure assorted tools and linters
[tool.pymarkdown]
plugins.md014.enabled = false
plugins.md046.enabled = false

[tool.ruff]
line-length = 80
lint.select = ["ALL"] # we are being very strict!
lint.ignore = [
  "ANN101",
  "PGH003",
  "FBT002",
  "FBT003",
  "B006",
] # These rules are too strict even for us 😝
lint.extend-ignore = [
  "COM812",
  "ISC001",
] # these are ignored for ruff formatting

src = ["-"]
target-version = "py39" # minimum python version supported

[tool.ruff.format]
indent-style = "space"
quote-style = "double"

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["pydantic.validator", "pydantic.root_validator"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
  "S101",   # we can (and MUST!) use 'assert' in test files.
  "ANN001", # annotations for fixtures are sometimes a pain for test files
]

[tool.ruff.lint.isort]
known-first-party = []

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[[tool.mypy.overrides]]
disable_error_code = ["method-assign", "no-untyped-def", "attr-defined"]
module = "tests.*"

# Options for pytest and coverage
[tool.pytest.ini_options]
addopts = [
  "-m",
  "not rewrite",
  "--cov",
  "--cov-report",
  "term-missing",
  "--cov-report",
  "html",
]
filterwarnings = []
mock_use_standalone_module = true
markers = [
  "unit: Unit tests",
  "integration: Integration tests",
  "rewrite: Tests need Rewriting",  # will be skipped automatically
]

[tool.coverage.run]
# source = []
omit = ["*/tests/*"]
concurrency = ["thread", "greenlet"]

[tool.coverage.report]
show_missing = true
